const BASEURL = `https://api.spotify.com/v1`;

export const getArtists = async (searchQuery: string) => {

  const token = localStorage.getItem("access_token");
    try {
      const response = await fetch(
        `${BASEURL}/search?q=${searchQuery}&type=artist&limit=9`,
        {
          headers: {
            Authorization: "Bearer " + token,
          },
        }
      );

      if(response.status === 401){
        localStorage.setItem("isTimeout","true");
        localStorage.removeItem("access_token");
        location.href = "http://localhost:5173/";
      }
      return response.json();
      
    }
    catch(error){
      console.log(error);
    }};


export const getTracks = async (searchQuery: string) => {

  const token = localStorage.getItem("access_token");
    try {
      const response = await fetch(
        `${BASEURL}/search?q=${searchQuery}&type=track&limit=20`,
        {
          headers: {
            Authorization: "Bearer " + token,
          },
        }
      );
      if(response.status === 401){
        localStorage.setItem("isTimeout","true");
        localStorage.removeItem("access_token");
        location.href = "http://localhost:5173/";
      }
      return response.json();
    }
    catch(error){
      console.log(error);
    }};

export const getRecommendation = async (limit: number, artists: string[], tracks : string[]) => {
  const token = localStorage.getItem("access_token");
    try {
      const response = await fetch(
        `${BASEURL}/recommendations?limit=${limit}&seed_artists=${artists.join(",")}&seed_tracks=${tracks.join(",")}`,
        {
          headers: {
            Authorization: "Bearer " + token,
          },
        }
      );
      if(response.status === 401){
        localStorage.setItem("isTimeout","true");
        localStorage.removeItem("access_token");
        location.href = "http://localhost:5173/";
      }
      return response.json();
    }
    catch(error){
      console.log(error);
    }};


export const createPlaylist = async (tracks : string[], playlist_name:string, isPublic: boolean) => {
  const token = localStorage.getItem("access_token");
    try {
      const headers = { Authorization: `Bearer ${token}` };
      let userID : string;
      let playlistID: string = "";
      const result = await fetch(`${BASEURL}/me`, { headers: headers })
      .then((response) => response.json())
      .then((jsonResponse) => {
        userID = jsonResponse.id;
        return fetch(`${BASEURL}/users/${userID}/playlists`, {
          method: 'POST',
          headers: headers,
          body: JSON.stringify({ name: playlist_name, public: isPublic, description: "Generated by Listify" }),
        })
          .then((response) => response.json())
          .then((jsonResponse) => {
          playlistID = jsonResponse.id;
            return fetch(
              `${BASEURL}/users/${userID}/playlists/${playlistID}/tracks`,
              {
                method: 'POST',
                headers: headers,
                body: JSON.stringify({ uris: tracks }),
              }
            );
          });
      });

      if(result.status === 401){
        localStorage.setItem("isTimeout","true");
        localStorage.removeItem("access_token");
        location.href = "http://localhost:5173/";
      }
      return playlistID;
    }
    catch(error){
      console.log(error);
    }
};


export const getUserId = async () => {
  const token = localStorage.getItem("access_token");
    try {
      const response = await fetch(
        `${BASEURL}/me`,
        {
          headers: {
            Authorization: "Bearer " + token,
          },
        }
      );
      if(response.status === 401){
        localStorage.setItem("isTimeout","true");
        localStorage.removeItem("access_token");
        location.href = "http://localhost:5173/";
      }
      return response.json();
    }
    catch(error){
      console.log(error);
    }};

    export const getTopFive = async (artistId: string) => {
      const token = localStorage.getItem("access_token");
        try {
          const response = await fetch(
            `${BASEURL}/artists/${artistId}/top-tracks`,
            {
              headers: {
                Authorization: "Bearer " + token,
              },
            }
          );
          if(response.status === 401){
            localStorage.setItem("isTimeout","true");
            localStorage.removeItem("access_token");
            location.href = "http://localhost:5173/";
          }
          return response.json();
        }
        catch(error){
          console.log(error);
        }};
